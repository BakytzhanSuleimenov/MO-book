import matplotlib.pyplot as plt
import numpy as np

# interpolated points
T = 500
tp = np.array([ 0, T/2, T/2, T])
zp = np.array([25,  25, 26, 26])

# create data set
t = np.linspace(0, T, T + 1)
z = np.interp(t, tp, xp)
x = z + np.random.normal(0, 2, size=len(t))

fig, ax = plt.subplots(figsize=(10, 3))
ax.plot(t, z, lw=5)
ax.plot(t, x, 'o')

fig, ax = plt.subplots(2, 1, figsize=(10, 6))

ax[0].plot(t, z, lw=5)
ax[0].plot(t, x, 'o')

S = 0
x_mean = x.mean()
delta = 1.0
for tn, xn in zip(t, x):
    S = max(0, S + xn - x_mean - delta/2)
    ax[1].plot(tn, S, 'bo', ms=3)
S

delta = 1.0
s = delta*(y - (y.mean() + y.mean() + delta)/2)
plt.plot(t, s)

z = y - (2*y.mean() + 0)/2


plt.plot(t, np.flip(np.cumsum(np.flip(z))))

import cvxpy as cp

x_bar = cp.Variable()
objective = cp.Minimize(cp.norm(x_meas - x_bar, 2))
problem = cp.Problem(objective)
problem.solve()
x_bar.value

x_bar.value

L = np.tril(np.ones(shape=(tf + 1, tf + 1)))


import cvxpy as cp

x_bar = cp.Variable()
u = cp.Variable(shape=(tf + 1,))
constraint = [cp.norm(u, 1) <= 1.0]
objective = cp.Minimize(cp.norm(x_meas - L @ u - x_bar, 2))
problem = cp.Problem(objective, constraint)
problem.solve()
x_bar.value

plt.plot(u.value)




