# install Pyomo and solvers for Google Colab
import sys
if "google.colab" in sys.modules:
    !wget -N -q https://raw.githubusercontent.com/jckantor/MO-book/main/tools/install_on_colab.py 
    %run install_on_colab.py

import pyomo.environ as pyo
import pyomo.gdp as gdp

m = pyo.ConcreteModel()

m.LETTERS = pyo.Set(initialize=['S', 'E', 'N', 'D', 'M', 'O', 'R', 'Y'])
m.n = pyo.Var(m.LETTERS, domain=pyo.Integers, bounds=(0, 9))

@m.Constraint()
def message(m):
    return               1000*m.n['S'] + 100*m.n['E'] + 10*m.n['N'] + m.n['D'] \
                       + 1000*m.n['M'] + 100*m.n['O'] + 10*m.n['R'] + m.n['E'] \
     == 10000*m.n['M'] + 1000*m.n['O'] + 100*m.n['N'] + 10*m.n['E'] + m.n['Y']

# leading digit must be non-zero
@m.Constraint()
def leading_digit_nonzero(m):
    return m.n['M'] >= 1

# assign a different number to each letter
@m.Disjunction(m.LETTERS, m.LETTERS)
def unique_assignment(m, a, b):
    if a < b:
        return [m.n[a] >= m.n[b] + 1,
                m.n[b] >= m.n[a] + 1]
    else:
        return gdp.Disjunction.Skip

pyo.TransformationFactory('gdp.bigm').apply_to(m)
solver = pyo.SolverFactory('gecode')
solver.solve(m)

print(f"    {int(m.n['S']())} {int(m.n['E']())} {int(m.n['N']())} {int(m.n['D']())}")
print(f"  + {int(m.n['M']())} {int(m.n['O']())} {int(m.n['R']())} {int(m.n['E']())}")
print(f"  ---------")
print(f"= {int(m.n['M']())} {int(m.n['O']())} {int(m.n['N']())} {int(m.n['E']())} {int(m.n['Y']())}")
